a#ruby_lang href='https://www.ruby-lang.org/'
	img src='/images/ruby.png' alt='ruby'
javascript:
	ws = NaN
	handle = ''
	function onsubmit(e) {
		e.preventDefault();
		if($('#text')[0].value == '') {return false}
		if(ws && ws.readyState == 1) {
			ws.send($('#text')[0].value);
			$('#text')[0].value = '';
		} else {
			handle = $('#text')[0].value
			var url = (window.location.protocol.match(/https/) ? 'wss' : 'ws') + '://' + window.document.location.host + '/' + $('#text')[0].value
			ws = new WebSocket(url)
			ws.onopen = function(e) {
				output("<b>Connected :-)</b>");
				$('#text')[0].value = '';
				$('#text')[0].placeholder = 'your message';
			}
			ws.onclose = function(e) {
				output("<b>Disonnected :-/</b>")
				$('#text')[0].placeholder = 'nickname';
				$('#text')[0].value = handle
			}
			ws.onmessage = function(e) {
				output(e.data);
			}
		}
		return false;
	}
	function output(data) {
		$('#output').append("<li>" + data + "</li>")
		$('#output').animate({ scrollTop:
				$('#output')[0].scrollHeight }, "slow");
	}
h1#tagline Websockets for Ruby made easy
/ h1#tagline the Ruby framework for realtime web-apps
div#demo
	div#client
		div class='bordered'
			p Websockets? AJAX? RESTful Http? - Plezi.
			ul
				li Easier than Faye, more fun than socket.io.
				li Works on it's own or with Rack/Rails/Sinatra.
			p A real-time Websocket Chat Room? It's the new "Hello World"!
			form#form
				input type='text' id='text' name='text' placeholder='nickname' autocomplete="off"
				input type='submit' value='send'
			javascript:
				$('#form')[0].onsubmit = onsubmit
			ul id='output'
            a#sign href='/docs'
	div#code
		pre
			code class='ruby'
				|
					# finish with `exit` if running within `irb`
					require 'plezi'
					class ChatServer
						def index
							render :client
						end
						def on_open
							return close unless params[:id]
							broadcast :print,
									"\#{params[:id]} joind the chat."
							print "Welcome, \#{params[:id]}!"
						end
						def on_close
							broadcast :print,
									"\#{params[:id]} left the chat."
						end
						def on_message data
							self.class.broadcast :print,
										"\#{params[:id]}: \#{data}"
						end
						protected
						def print data
							write ::ERB::Util.html_escape(data)
						end
					end
					path_to_client = File.expand_path( File.dirname(__FILE__) )
					host templates: path_to_client
					route '/', ChatServer
input#show_code type='checkbox'
div id='client_code'
	pre
		code class='html'
			|
				&lt;!-- client.html.erb --&gt;
				&lt;!DOCTYPE html&gt;&lt;html&gt;
				&lt;head&gt;
					&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"&gt;&lt;/script&gt;
					&lt;script&gt;
						ws = NaN
						handle = ''
						function onsubmit(e) {
							e.preventDefault();
							if($('#text')[0].value == '') {return false}
							if(ws &amp;&amp; ws.readyState == 1) {
								ws.send($('#text')[0].value);
								$('#text')[0].value = '';
							} else {
								handle = $('#text')[0].value
								var url = (window.location.protocol.match(/https/) ? 'wss' : 'ws') +
								            '://' + window.document.location.host +
											'/' + $('#text')[0].value
								ws = new WebSocket(url)
								ws.onopen = function(e) {
									output("&lt;b&gt;Connected :-)&lt;/b&gt;");
									$('#text')[0].value = '';
									$('#text')[0].placeholder = 'your message';
								}
								ws.onclose = function(e) {
									output("&lt;b&gt;Disonnected :-/&lt;/b&gt;")
									$('#text')[0].value = '';
									$('#text')[0].placeholder = 'nickname';
									$('#text')[0].value = handle
								}
								ws.onmessage = function(e) {
									output(e.data);
								}
							}
							return false;
						}
						function output(data) {
							$('#output').append("&lt;li&gt;" + data + "&lt;/li&gt;")
							$('#output').animate({ scrollTop:
										$('#output')[0].scrollHeight }, "slow");
						}
					&lt;/script&gt;
				&lt;/head&gt;&lt;body&gt;
					&lt;p&gt; Websockets? AJAX? RESTful Http? - Plezi.&lt;/p&gt;
					&lt;ul&gt;
						&lt;li&gt; Easier than Faye, more fun than socket.io.&lt;/li&gt;
						&lt;li&gt; Works on it's own or with Rack/Rails/Sinatra.&lt;/li&gt;
					&lt;/ul&gt;
					&lt;p&gt; A real-time Websocket Chat Room? It's the new "Hello World"!&lt;/p&gt;
					&lt;p&gt;Websockets? AJAX? RESTful Http? - Plezi.&lt;/p&gt;
					&lt;p&gt;A real-time Websocket Chat Room? It's the new "Hello World"!&lt;/p&gt;
					&lt;form id='form'&gt;
						&lt;input type='text' id='text' name='text' placeholder='nickname'&gt;&lt;/input&gt;
						&lt;input type='submit' value='send'&gt;&lt;/input&gt;
					&lt;/form&gt;
					&lt;script&gt; $('#form')[0].onsubmit = onsubmit &lt;/script&gt;
					&lt;ul id='output'&gt;&lt;/ul&gt;
					&lt;p&gt;* Plezi can work together with Rack/Rails/Sinatra.&lt;/p&gt;
				&lt;/body&gt;